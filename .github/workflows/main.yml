name: Module Builder

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitattributes'
      - '.gitignore'
      - '/src/packs/**'
      - '/src/module/helperCode/**'
      - 'package-lock.json'
      - 'package.json'
      - 'release_notes.txt'

jobs:
  build:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.set-release-notes.outputs.release-notes }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Version from Commit Message
        id: get-version
        run: |
          version=$(git log -1 --pretty=%B | grep -o -E '[v]?[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?' | sed 's/^v//')
          echo 'version=$version' >> $GITHUB_ENV
          echo 'version=$version' >> $GITHUB_OUTPUT

      - name: Get System Version from module.json
        id: get-system
        run: |
          system_version=$(node .github/workflows/get-system.js)
          echo 'system_version=$system_version' >> $GITHUB_ENV

      - name: Update module.json with Version
        run: node .github/workflows/update-module.js 'v${{ steps.get-version.outputs.version }}'

      - name: Zip Files
        run: |
          zip -r ./module.zip ./ -x 'README.md' 'CHANGELOG.md' 'LICENSE.md' 'TODO.md' '.gitattributes' '.gitignore'

      - name: Set Release Notes from CHANGELOG.md
        id: set-release-notes
        run: |
          release_notes=$(node .github/workflows/extract-release-notes.js CHANGELOG.md)
          echo 'release_notes=$release_notes' >> $GITHUB_ENV
          echo 'release_notes=$release_notes' >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: 'v${{ steps.get-version.outputs.version }}'
          draft: false
          prerelease: false
          body: ${{ steps.set-release-notes.outputs.release-notes }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.zip, ./module.json'
          tag: 'v${{ steps.get-version.outputs.version }}'

      - name: Release Foundry Package
        run: |
          REPO_URL='https://github.com/${GITHUB_REPOSITORY}'
          curl -X POST 'https://api.foundryvtt.com/_api/packages/release_version' \
          -H 'Content-Type: application/json' \
          -H 'Authorization: ${{ secrets.FOUNDRY_API_TOKEN }}' \
          -d '{
            "id": "elkan5e",
            "release": {
              "version": "v${{ steps.get-version.outputs.version }}",
              "manifest": "'"${REPO_URL}/releases/latest/download/module.json"'",
              "download": "'"${REPO_URL}/releases/download/v${{ steps.get-version.outputs.version }}/module.zip"'",
              "notes": "'"${REPO_URL}/releases/tag/v${{ steps.get-version.outputs.version }}"'",
              "compatibility": {
                "minimum": "12",
                "verified": "12.331",
                "maximum": "12.999"
              }
            }
          }'

      - name: Post to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          REPO_URL='https://github.com/${GITHUB_REPOSITORY}'
          VERSION='v${{ steps.get-version.outputs.version }}'
          SYSTEM_VERSION='${{ steps.get-system.outputs.system_version }}'
          RELEASE_NOTES='${{ steps.set-release-notes.outputs.release-notes }}'

          JSON_PAYLOAD=$(jq -n \
            --arg title 'Elkan 5e Release' \
            --arg version "$VERSION" \
            --arg system_version "$SYSTEM_VERSION" \
            --arg foundry_url 'https://foundryvtt.com/packages/elkan5e' \
            --arg release_url "$REPO_URL/releases/tag/$VERSION/module.json" \
            --arg download_url "$REPO_URL/releases/tag/$VERSION/module.zip" \
            --arg release_notes "$RELEASE_NOTES" \
            '{embeds: [{
              title: $title,
              fields: [
                {name: "Version", value: $version, inline: true},
                {name: "Compatibility", value: ("Core: V12.331, System: " + $system_version + "+"), inline: true},
                {name: "Foundry Package", value: $foundry_url, inline: false},
                {name: "Release Tag", value: $release_url, inline: false},
                {name: "Manual Download", value: $download_url, inline: false},
                {name: "Release Notes", value: $release_notes, inline: false}
              ]
            }]}')

          curl -H 'Content-Type: application/json' \
               -d "$JSON_PAYLOAD" \
               $DISCORD_WEBHOOK
