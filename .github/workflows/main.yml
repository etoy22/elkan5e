name: Release Build

on:
    push:
        branches: [main]
    pull_request:
        types: [closed]
        branches: [main]
    workflow_dispatch:

concurrency:
    group: release-${{ github.ref }}
    cancel-in-progress: false

permissions:
    contents: write

jobs:
    version-check:
        name: Version Check
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.out.outputs.version }}
            should_continue: ${{ steps.out.outputs.should_continue }}
            test: ${{ steps.out.outputs.test }}
            prerelease: ${{ steps.out.outputs.prerelease }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - id: get_version
              name: Run get-version-info script
              env:
                  GITHUB_EVENT_NAME: ${{ github.event_name }}
                  GITHUB_REF: ${{ github.ref }}
                  GITHUB_EVENT_PATH: ${{ github.event_path }}
              run: |
                  node .github/workflows/scripts/get-version-info.js > version-info.json
                  cat version-info.json

            - id: out
              name: Export version outputs
              run: |
                  version=$(jq -r '.version' version-info.json)
                  should_continue=$(jq -r '.should_continue' version-info.json)
                  test=$(jq -r '.test' version-info.json)
                  prerelease=$(jq -r '.prerelease' version-info.json)
                  echo "version=$version" >> $GITHUB_OUTPUT
                  echo "should_continue=$should_continue" >> $GITHUB_OUTPUT
                  echo "test=$test" >> $GITHUB_OUTPUT
                  echo "prerelease=$prerelease" >> $GITHUB_OUTPUT

    build:
        name: Build & Package
        runs-on: ubuntu-latest
        needs: version-check
        if: needs.version-check.outputs.should_continue == 'true'
        env:
            # DRY_RUN is 1 when -test flag is present; your build/pack scripts should respect it.
            DRY_RUN: ${{ needs.version-check.outputs.test == 'true' && '1' || '0' }}
        outputs:
            artifact_name: ${{ steps.pkg.outputs.name }}
            artifact_path: ${{ steps.pkg.outputs.path }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Install deps
              run: npm ci

            - name: Echo DRY_RUN mode
              run: |
                  if [ "${DRY_RUN}" = "1" ]; then
                    echo "DRY_RUN enabled (-test flag detected)."
                  else
                    echo "DRY_RUN disabled."
                  fi

            - name: Build
              run: npm run build --if-present

            - name: Update module.json URLs
              if: env.DRY_RUN != '1'
              run: |
                  node .github/workflows/scripts/update-module.js "${{ needs.version-check.outputs.version }}"
                  cat module.json

            - id: pkg
              name: Create package (zip)
              run: |
                  NAME="elkan5e-${{ needs.version-check.outputs.version }}"
                  mkdir -p dist
                  zip -r "dist/$NAME.zip" . -x ".git/*" ".github/*" "node_modules/*" "dist/*"
                  echo "name=$NAME" >> $GITHUB_OUTPUT
                  echo "path=dist/$NAME.zip" >> $GITHUB_OUTPUT

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.pkg.outputs.name }}
                  path: ${{ steps.pkg.outputs.path }}
                  if-no-files-found: error
                  retention-days: 14

    release:
        name: Create/Update GitHub Release
        runs-on: ubuntu-latest
        needs: [version-check, build]
        if: needs.version-check.outputs.should_continue == 'true' && needs.version-check.outputs.version != '' &&  needs.version-check.outputs.test != 'true'
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: ${{ needs.build.outputs.artifact_name }}
                  path: dist

            - name: Create release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ needs.version-check.outputs.version }}
                  name: v${{ needs.version-check.outputs.version }}
                  draft: false
                  prerelease: ${{ needs.version-check.outputs.prerelease == 'true' }}
                  generate_release_notes: true
                  files: |
                      dist/${{ needs.build.outputs.artifact_name }}.zip
