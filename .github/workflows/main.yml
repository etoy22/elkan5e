name: Release Build

on:
  push:
    branches:
      - main
      - '**'  # all branches for test runs
  workflow_dispatch:

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_continue: ${{ steps.get_version.outputs.should_continue }}
      test: ${{ steps.get_version.outputs.test }}
      prerelease: ${{ steps.get_version.outputs.prerelease }}
      minimum: ${{ steps.get_version.outputs.minimum }}
      verified: ${{ steps.get_version.outputs.verified }}
      maximum: ${{ steps.get_version.outputs.maximum }}
    steps:
      - uses: actions/checkout@v4

      - id: get_version
        name: Run get-version-info script
        run: |
          node .github/workflows/scripts/get-version-info.js > version-info.json
          cat version-info.json

          version=$(jq -r '.version' version-info.json)
          should_continue=$(jq -r '.should_continue' version-info.json)
          test=$(jq -r '.test' version-info.json)
          prerelease=$(jq -r '.prerelease' version-info.json)
          minimum=$(jq -r '.compatibility.minimum // empty' version-info.json)
          verified=$(jq -r '.compatibility.verified // empty' version-info.json)
          maximum=$(jq -r '.compatibility.maximum // empty' version-info.json)

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "should_continue=$should_continue" >> $GITHUB_OUTPUT
          echo "test=$test" >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
          echo "minimum=$minimum" >> $GITHUB_OUTPUT
          echo "verified=$verified" >> $GITHUB_OUTPUT
          echo "maximum=$maximum" >> $GITHUB_OUTPUT

      - name: Show version info outputs
        if: steps.get_version.outputs.should_continue == 'true'
        run: |
          echo "Version: ${{ steps.get_version.outputs.version }}"
          echo "Should Continue: ${{ steps.get_version.outputs.should_continue }}"
          echo "Test: ${{ steps.get_version.outputs.test }}"
          echo "Prerelease: ${{ steps.get_version.outputs.prerelease }}"
          echo "Minimum Compatibility: ${{ steps.get_version.outputs.minimum }}"
          echo "Verified Compatibility: ${{ steps.get_version.outputs.verified }}"
          echo "Maximum Compatibility: ${{ steps.get_version.outputs.maximum }}"

  extract-release-notes:
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.should_continue == 'true' && (needs.version-check.outputs.test == 'true' || github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4

      - name: Extract release notes from CHANGELOG.md
        run: node .github/workflows/scripts/extract-release-notes.js > release-notes.md

      - name: Show extracted release notes
        run: cat release-notes.md

      - uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 1

  build-and-pack:
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.should_continue == 'true' && (needs.version-check.outputs.test == 'true' || github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Update module.json version and compatibility
        run: |
          node .github/workflows/scripts/update-module.js \
            "${{ needs.version-check.outputs.version }}" \
            "${{ needs.version-check.outputs.minimum }}" \
            "${{ needs.version-check.outputs.verified }}" \
            "${{ needs.version-check.outputs.maximum }}"

      - name: Run pack script
        run: npm run pack

      - name: Zip module for release
        run: |
          zip -r module.zip . \
            -x "node_modules/**" \
            -x "node_modules" \
            -x "helperCode/**" \
            -x "src/packs/**" \
            -x "src/packs" \
            -x "packs/_source/**" \
            -x "packs/_source" \
            -x "package.json" \
            -x "package-lock.json" \
            -x "jsconfig.json" \
            -x ".gitignore" \
            -x ".gitattributes" \
            -x ".git" \
            -x ".git/**" \


      - name: List zipped files
        run: unzip -l module.zip

  create-github-release:
    runs-on: ubuntu-latest
    needs: [version-check, extract-release-notes, build-and-pack]
    if: needs.version-check.outputs.should_continue == 'true' && needs.build-and-pack.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Download release notes artifact
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Read release notes content
        id: read_release_notes
        run: |
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Show release notes content before release
        run: echo "${{ steps.read_release_notes.outputs.release_notes }}"

      - name: Create GitHub Release
        if: needs.version-check.outputs.test != 'true'  # only skip release on test
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: "${{ needs.version-check.outputs.version }}"
          draft: false
          prerelease: ${{ needs.version-check.outputs.prerelease }}
          body: ${{ steps.read_release_notes.outputs.release_notes }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            ./module.zip
            ./module.json
          tag: "${{ needs.version-check.outputs.version }}"

  release-foundry-package:
    runs-on: ubuntu-latest
    needs: [version-check, create-github-release]
    if: needs.version-check.outputs.should_continue == 'true' && needs.create-github-release.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Install node dependencies
        run: npm install node-fetch@2
            
      - name: Release Foundry Package
        env:
          FOUNDRY_API_TOKEN: ${{ secrets.FOUNDRY_API_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          VERSION: ${{ needs.version-check.outputs.version }}
          MINIMUM: ${{ needs.version-check.outputs.minimum }}
          VERIFIED: ${{ needs.version-check.outputs.verified }}
          MAXIMUM: ${{ needs.version-check.outputs.maximum }}
          TEST: ${{ needs.version-check.outputs.test }}
        run: node .github/workflows/scripts/release-foundry.js

      - name: Show environment variables
        run: |
          echo "VERSION=$VERSION"
          echo "MINIMUM=$MINIMUM"
          echo "VERIFIED=$VERIFIED"
          echo "MAXIMUM=$MAXIMUM"
          echo "TEST=$TEST"
          
  notify-discord:
    runs-on: ubuntu-latest
    needs: [version-check, extract-release-notes, build-and-pack, create-github-release]
    if: needs.version-check.outputs.should_continue == 'true' && needs.create-github-release.result == 'success'
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      REPO_URL: "https://github.com/${{ github.repository }}"
      VERSION: "${{ needs.version-check.outputs.version }}"
      MINIMUM: ${{ needs.version-check.outputs.minimum }}
      VERIFIED: ${{ needs.version-check.outputs.verified }}
      MAXIMUM: ${{ needs.version-check.outputs.maximum }}
    steps:
      - name: Download release notes artifact
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .
      
      - name: Show release notes in logs
        run: cat release-notes.md

      - name: Read release notes content
        id: read_release_notes
        run: |
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare Discord payload
        id: prepare_discord_payload
        run: |
          RELEASE_NOTES="${{ steps.read_release_notes.outputs.release_notes }}"
          CLEAN_RELEASE_NOTES=$(echo -e "$RELEASE_NOTES")

          PAYLOAD=$(jq -n \
            --arg title "Elkan 5e Release" \
            --arg version "$VERSION" \
            --arg compatibility "Core: $MINIMUM +" \
            --arg foundry_url "https://foundryvtt.com/packages/elkan5e" \
            --arg release_url "$REPO_URL/releases/tag/$VERSION" \
            --arg download_url "$REPO_URL/releases/download/$VERSION/module.zip" \
            --arg release_notes "$CLEAN_RELEASE_NOTES" \
            '{embeds: [{
              title: $title,
              fields: [
                {name: "Version", value: $version, inline: true},
                {name: "Compatibility", value: $compatibility, inline: true},
                {name: "Foundry Package", value: $foundry_url, inline: false},
                {name: "Release Tag", value: $release_url, inline: false},
                {name: "Manual Download", value: $download_url, inline: false},
                {name: "Release Notes", value: $release_notes, inline: false}
              ]
            }]}')

          echo "$PAYLOAD"
          # Use multiline output syntax for GitHub Actions
          echo "discord_payload<<EOF" >> $GITHUB_OUTPUT
          echo "$PAYLOAD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Post to Discord
        if: needs.version-check.outputs.test != 'true'
        run: |
          echo "Posting to Discord..."
          curl -H "Content-Type: application/json" -X POST -d "${{ steps.prepare_discord_payload.outputs.discord_payload }}" $DISCORD_WEBHOOK
