import os
import json
import math
from collections import defaultdict, Counter
from openpyxl import Workbook

ROOT_DIR = "./packs/_source/elkan5e-spells"

DND_SPELL_SCHOOLS = {
    "abj": "Abjuration",
    "con": "Conjuration",
    "div": "Divination",
    "enc": "Enchantment",
    "evo": "Evocation",
    "ill": "Illusion",
    "nec": "Necromancy",
    "trs": "Transmutation",
}

# Data trackers
spell_counts_by_level = Counter()
spell_counts_by_school = Counter()
spell_counts_by_level_and_school = defaultdict(Counter)

damage_save_counts_by_level = Counter()
damage_attack_counts_by_level = Counter()

damage_values_by_level = defaultdict(list)

damage_save_values_by_level = defaultdict(list)
damage_save_values_with_effect_by_level = defaultdict(list)
damage_save_values_without_effect_by_level = defaultdict(list)

damage_attack_values_by_level = defaultdict(list)
damage_attack_values_with_effect_by_level = defaultdict(list)
damage_attack_values_without_effect_by_level = defaultdict(list)

# Activation data
activation_by_school = defaultdict(Counter)  # school -> activation type -> count
ritual_counts_by_school = Counter()  # school -> ritual count

def safe_int(value, default=0):
    try:
        return int(value)
    except (TypeError, ValueError):
        return default

def calc_average_damage(damage_parts):
    total_damage = 0
    for part in damage_parts:
        number = safe_int(part.get("number", 0))
        denomination = safe_int(part.get("denomination", 0))
        bonus = safe_int(part.get("bonus", 0))
        average_per_die = math.ceil(denomination / 2)
        total_damage += number * average_per_die + bonus
    return total_damage

def scan_folder(folder):
    for root, dirs, files in os.walk(folder):
        if "spells-class-specific-versions" in root:
            continue
        for file in files:
            if file.endswith(".json"):
                parse_spell(os.path.join(root, file))

def parse_spell(file_path):
    try:
        with open(file_path, encoding="utf-8") as f:
            data = json.load(f)
            if data.get("type") != "spell":
                return

            system = data.get("system", {})
            level = safe_int(system.get("level", -1))
            school_short = system.get("school", "").lower()
            school = DND_SPELL_SCHOOLS.get(school_short)
            if not school:
                school = None

            spell_counts_by_level[level] += 1
            if school:
                spell_counts_by_school[school] += 1
                spell_counts_by_level_and_school[level][school] += 1

            # Ritual flag fix: check system.properties.ritual
            properties = system.get("properties", {})
            if properties.get("ritual", False) and school:
                ritual_counts_by_school[school] += 1

            activities = system.get("activities", {})

            total_avg_damage = 0
            for act in activities.values():
                if isinstance(act, dict):
                    damage_parts = act.get("damage", {}).get("parts", [])
                    total_avg_damage += calc_average_damage(damage_parts)

            if total_avg_damage > 0:
                damage_values_by_level[level].append(total_avg_damage)

            # Activation counts by school
            for act in activities.values():
                if not isinstance(act, dict):
                    continue
                activation_type = act.get("activation", system.get("activation", {})).get("type") or act.get("activation", {}).get("type") or system.get("activation", {}).get("type") or act.get("activation", system.get("activation", {}))
                if not activation_type:
                    activation_type = act.get("activation", {}).get("type", "unknown")

                if isinstance(activation_type, dict):
                    activation_type = activation_type.get("type", "unknown")
                if not isinstance(activation_type, str):
                    activation_type = "unknown"

                if activation_type == "unknown":
                    continue

                if school:
                    activation_by_school[school][activation_type] += 1

            for act in activities.values():
                if not isinstance(act, dict):
                    continue
                act_type = act.get("type")
                damage_parts = act.get("damage", {}).get("parts", [])
                avg_damage = calc_average_damage(damage_parts)
                effect_present = bool(act.get("effect")) or avg_damage > 0

                if act_type == "save":
                    damage_save_counts_by_level[level] += 1
                    if avg_damage > 0:
                        damage_save_values_by_level[level].append(avg_damage)
                        if effect_present:
                            damage_save_values_with_effect_by_level[level].append(avg_damage)
                        else:
                            damage_save_values_without_effect_by_level[level].append(avg_damage)
                elif act_type == "attack":
                    damage_attack_counts_by_level[level] += 1
                    if avg_damage > 0:
                        damage_attack_values_by_level[level].append(avg_damage)
                        if effect_present:
                            damage_attack_values_with_effect_by_level[level].append(avg_damage)
                        else:
                            damage_attack_values_without_effect_by_level[level].append(avg_damage)

    except Exception as e:
        print(f"Error parsing {file_path}: {e}")

# Run scanning
scan_folder(ROOT_DIR)

# Create workbook
wb = Workbook()

# ===== SummaryByLevel sheet =====
summary_ws = wb.active
summary_ws.title = "SummaryByLevel"

header = [
    "Level", "Count",
    "Abjuration", "Conjuration", "Divination", "Enchantment", "Evocation",
    "Illusion", "Necromancy", "Transmutation",
    "Average Damage",
    "Count Damage Saves", "Average Damage Save",
    "Average Damage Save With Effect", "Average Damage Save Without Effect",
    "Count Damage Attacks", "Average Damage Attack",
    "Average Damage Attack With Effect", "Average Damage Attack Without Effect",
]
summary_ws.append(header)

all_levels = sorted(spell_counts_by_level.keys())

for lvl in all_levels:
    row = [
        lvl,
        spell_counts_by_level.get(lvl, 0),
    ]
    for school_short in ["abj", "con", "div", "enc", "evo", "ill", "nec", "trs"]:
        school_name = DND_SPELL_SCHOOLS[school_short]
        count = spell_counts_by_level_and_school[lvl].get(school_name, 0)
        row.append(count)

    avg_damage = (
        sum(damage_values_by_level[lvl]) / len(damage_values_by_level[lvl])
        if damage_values_by_level[lvl]
        else 0
    )
    row.append(round(avg_damage, 2))

    count_saves = damage_save_counts_by_level.get(lvl, 0)
    row.append(count_saves)

    avg_save = (
        sum(damage_save_values_by_level[lvl]) / len(damage_save_values_by_level[lvl])
        if damage_save_values_by_level[lvl]
        else 0
    )
    row.append(round(avg_save, 2))

    avg_save_with = (
        sum(damage_save_values_with_effect_by_level[lvl])
        / len(damage_save_values_with_effect_by_level[lvl])
        if damage_save_values_with_effect_by_level[lvl]
        else 0
    )
    row.append(round(avg_save_with, 2))

    avg_save_without = (
        sum(damage_save_values_without_effect_by_level[lvl])
        / len(damage_save_values_without_effect_by_level[lvl])
        if damage_save_values_without_effect_by_level[lvl]
        else 0
    )
    row.append(round(avg_save_without, 2))

    count_attacks = damage_attack_counts_by_level.get(lvl, 0)
    row.append(count_attacks)

    avg_attack = (
        sum(damage_attack_values_by_level[lvl]) / len(damage_attack_values_by_level[lvl])
        if damage_attack_values_by_level[lvl]
        else 0
    )
    row.append(round(avg_attack, 2))

    avg_attack_with = (
        sum(damage_attack_values_with_effect_by_level[lvl])
        / len(damage_attack_values_with_effect_by_level[lvl])
        if damage_attack_values_with_effect_by_level[lvl]
        else 0
    )
    row.append(round(avg_attack_with, 2))

    avg_attack_without = (
        sum(damage_attack_values_without_effect_by_level[lvl])
        / len(damage_attack_values_without_effect_by_level[lvl])
        if damage_attack_values_without_effect_by_level[lvl]
        else 0
    )
    row.append(round(avg_attack_without, 2))

    summary_ws.append(row)

# ===== ActivationsBySchool sheet =====
activations_ws = wb.create_sheet("ActivationsBySchool")

# Gather all activation types dynamically
all_activation_types = set()
for school, counter in activation_by_school.items():
    all_activation_types.update(counter.keys())

# Sort activation types but keep "Action", "Bonus Action", "Minute", "Hour" upfront if present
priority_order = ["Action", "Bonus Action", "Minute", "Hour"]
sorted_activation_types = [t for t in priority_order if t in all_activation_types]
sorted_activation_types += sorted(t for t in all_activation_types if t not in priority_order)

# Prepare header
header = ["School", "Count"] + sorted_activation_types + ["Ritual Count"]
activations_ws.append(header)

# Write data rows, skipping schools with zero count
for school in sorted(spell_counts_by_school.keys()):
    total_count = spell_counts_by_school[school]
    if total_count == 0:
        continue

    row = [school, total_count]

    act_counts = activation_by_school.get(school, {})

    # Add counts for each activation type or 0 if missing
    for act_type in sorted_activation_types:
        count = act_counts.get(act_type, 0)
        row.append(count)

    # Add ritual count or 0
    ritual_count = ritual_counts_by_school.get(school, 0)
    row.append(ritual_count)

    # Skip the entire row if all activation counts and ritual count are zero
    if all(x == 0 for x in row[2:]):
        continue

    activations_ws.append(row)

# Save Excel file
output_path = r".\helperCode\logs\spells_info.xlsx"
wb.save(output_path)
print(f"Done! Data saved to {output_path}")
