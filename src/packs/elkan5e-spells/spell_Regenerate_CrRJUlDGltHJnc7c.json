{
  "name": "Regenerate",
  "type": "spell",
  "img": "icons/magic/life/cross-beam-green.webp",
  "effects": [
    {
      "_id": "gMvUlhgIUWdHEJ6r",
      "flags": {
        "dae": {
          "stackable": "none",
          "specialDuration": [
            "None"
          ],
          "transfer": false,
          "macroRepeat": "startEveryTurn",
          "selfTarget": false,
          "selfTargetAlways": false,
          "durationExpression": "",
          "enableCondition": "",
          "disableCondition": "",
          "disableIncapacitated": false,
          "dontApply": false,
          "showIcon": false
        },
        "core": {},
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": "",
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false,
          "nameOverride": "",
          "customCheck": "",
          "wallsBlock": "system"
        }
      },
      "changes": [
        {
          "key": "flags.midi-qol.OverTime",
          "mode": 0,
          "value": "turn=start,\napplyCondition=@attributes.hp.value >= 0 && @attributes.hp.value != @attributes.hp.max,\ndamageRoll = 1,\ndamageType = healing",
          "priority": 20
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 3600,
        "combat": null,
        "rounds": null,
        "turns": null,
        "startRound": null,
        "startTurn": null
      },
      "tint": "#ffffff",
      "transfer": false,
      "origin": null,
      "name": "Regenerate",
      "description": "",
      "statuses": [],
      "_stats": {
        "compendiumSource": null,
        "duplicateSource": null,
        "coreVersion": "12.331",
        "systemId": "dnd5e",
        "systemVersion": "4.0.2",
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null
      },
      "img": "icons/magic/life/cross-beam-green.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!CrRJUlDGltHJnc7c.gMvUlhgIUWdHEJ6r"
    }
  ],
  "folder": "H799nI2ov6BcHwd6",
  "flags": {
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false,
      "macro": {
        "name": "Regenerate",
        "img": "icons/magic/life/cross-beam-green.webp",
        "type": "script",
        "scope": "global",
        "command": "",
        "author": "3Yi0HjF4PKCA4vX0",
        "ownership": {
          "default": 3
        },
        "_id": null,
        "folder": null,
        "sort": 0,
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "itemacro": {
      "macro": {
        "_data": {
          "name": "Regenerate",
          "type": "script",
          "scope": "global",
          "command": "//DAE Macro Execute, Effect Value = \"Macro Name\" @tactor\nconst lastArg = args[args.length - 1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nelse tactor = game.actors.get(lastArg.actorId);\n\n/**\n * Set hooks to fire on combat update and world time update\n */\nif (args[0] === \"on\") {\n\n    // If 6s elapses, update HP by one\n    const timeHookId = Hooks.on(\"updateWorldTime\", (currentTime, updateInterval) => {\n        if (game.combats === []) return;\n        let effect = tactor.effects.find(i => i.data.label === \"Regenerate\");\n        let applyTime = effect.data.duration.startTime;\n        let expireTime = applyTime + effect.data.duration.seconds;\n        let healing = roundCount(currentTime, updateInterval, applyTime, expireTime);\n        console.log(`${tactor.name} healed for ${healing}`);\n        tactor.applyDamage(-healing);\n    }\n    );\n\n    tactor.setFlag(\"world\", \"Regenerate\", {\n        timeHook: timeHookId\n    }\n    );\n}\n\nif (args[0] === \"each\") {\n    tactor.applyDamage(-1);\n    ChatMessage.create({ content: `${tactor.name} gains 1 hp` });\n}\n\nif (args[0] === \"off\") {\n    async function RegenerateOff() {\n        let flag = await tactor.getFlag('world', 'Regenerate');\n        Hooks.off(\"updateWorldTime\", flag.timeHook);\n        tactor.unsetFlag(\"world\", \"Regenerate\");\n        console.log(\"Regenerate removed\");\n    };\n    RegenerateOff();\n}\n\n\n/**\n * \n * @param {Number} currentTime current world time\n * @param {Number} updateInterval amount the world time was incremented\n * @param {Number} applyTime time the effect was applied\n * @param {Number} expireTime time the effect should expire\n */\nfunction roundCount(currentTime, updateInterval, applyTime, expireTime) {\n    // Don't count time before applyTime\n    if (currentTime - updateInterval < applyTime) {\n        let offset = applyTime - (currentTime - updateInterval);\n        updateInterval -= offset;\n    }\n\n    // Don't count time after expireTime\n    if (currentTime > expireTime) {\n        let offset = currentTime - expireTime;\n        currentTime = expireTime;\n        updateInterval -= offset;\n    }\n\n    let sTime = currentTime - updateInterval;\n    let fRound = sTime + 6 - (sTime % 6); // Time of the first round\n    let lRound = currentTime - (currentTime % 6); // Time of the last round\n    let roundCount = 0;\n    if (lRound >= fRound)\n        roundCount = (lRound - fRound) / 6 + 1;\n\n    return roundCount;\n}",
          "author": "E4BVikjIkVl2lL2j"
        },
        "data": {
          "name": "Regenerate",
          "type": "script",
          "scope": "global",
          "command": "//DAE Macro , no arguments\nconst lastArg = args[args.length - 1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nelse tactor = game.actors.get(lastArg.actorId);\n\n/**\n * Set hooks to fire on combat update and world time update\n */\nif (args[0] === \"on\") {\n\n    // If 6s elapses, update HP by one\n    const timeHookId = Hooks.on(\"updateWorldTime\", (currentTime, updateInterval) => {\n        let effect = tactor.effects.find(i => i.data.label === \"Regenerate\");\n        let applyTime = effect.data.duration.startTime;\n        let expireTime = applyTime + effect.data.duration.seconds;\n        let healing = roundCount(currentTime, updateInterval, applyTime, expireTime);\n        tactor.applyDamage(-healing);\n        ChatMessage.create({ content: `${tactor.name} gains 1 hp` });\n    }\n    );\n\n    tactor.setFlag(\"world\", \"Regenerate\", {\n        timeHook: timeHookId\n    }\n    );\n}\n\nif (args[0] === \"off\") {\n    async function RegenerateOff() {\n        let flag = await tactor.getFlag('world', 'Regenerate');\n        Hooks.off(\"updateWorldTime\", flag.timeHook);\n        tactor.unsetFlag(\"world\", \"Regenerate\");\n        console.log(\"Regenerate removed\");\n    };\n    RegenerateOff();\n}\n\n\n/**\n * \n * @param {Number} currentTime current world time\n * @param {Number} updateInterval amount the world time was incremented\n * @param {Number} applyTime time the effect was applied\n * @param {Number} expireTime time the effect should expire\n */\nfunction roundCount(currentTime, updateInterval, applyTime, expireTime) {\n    // Don't count time before applyTime\n    if (currentTime - updateInterval < applyTime) {\n        let offset = applyTime - (currentTime - updateInterval);\n        updateInterval -= offset;\n    }\n\n    // Don't count time after expireTime\n    if (currentTime > expireTime) {\n        let offset = currentTime - expireTime;\n        currentTime = expireTime;\n        updateInterval -= offset;\n    }\n\n    let sTime = currentTime - updateInterval;\n    let fRound = sTime + 6 - (sTime % 6); // Time of the first round\n    let lRound = currentTime - (currentTime % 6); // Time of the last round\n    let roundCount = 0;\n    if (lRound >= fRound)\n        roundCount = (lRound - fRound) / 6 + 1;\n\n    return roundCount;\n}",
          "author": "zrPR3wueYsESSBR3",
          "_id": null,
          "img": "icons/svg/dice-target.svg",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "options": {},
        "apps": {},
        "compendium": null
      }
    },
    "midi-qol": {
      "onUseMacroName": "",
      "effectActivation": false,
      "rollAttackPerTarget": "default",
      "removeAttackDamageButtons": "default",
      "itemCondition": "",
      "otherCondition": "",
      "effectCondition": "",
      "reactionCondition": ""
    },
    "core": {},
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false,
      "ignoreTotalCover": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "offHandWeapon": false,
      "confirmTargets": "default",
      "noConcentrationCheck": false,
      "idr": false,
      "idi": false,
      "idv": false,
      "ida": false
    },
    "dnd5e": {
      "riders": {
        "activity": [],
        "effect": []
      },
      "migratedProperties": [
        "vocal",
        "somatic",
        "material"
      ]
    }
  },
  "system": {
    "description": {
      "value": "<p>You touch a creature and stimulate its natural Healing ability. The target regains 4d8 + 15 Hit Points. For the Duration of the spell, the target regains 1 hit point at the start of each of its turns (10 h⁠it points each minute).</p><p>The target’s severed body members (fingers, legs, tails, and so on), if any, are restored after 2 minutes. If you have the severed part and hold it to the stump, the spell instantaneously causes the limb to knit to the stump.</p>",
      "chat": ""
    },
    "source": {
      "custom": "Elkan 5e",
      "revision": 1,
      "rules": "",
      "book": "",
      "page": "",
      "license": ""
    },
    "activation": {
      "type": "minute",
      "condition": "",
      "value": 1
    },
    "duration": {
      "value": "1",
      "units": "hour"
    },
    "target": {
      "affects": {
        "type": "creature",
        "count": "1",
        "choice": false,
        "special": ""
      },
      "template": {
        "units": "",
        "contiguous": false,
        "type": ""
      }
    },
    "range": {
      "units": "touch",
      "special": ""
    },
    "uses": {
      "max": "",
      "recovery": [],
      "spent": 0
    },
    "ability": "",
    "level": 7,
    "school": "trs",
    "materials": {
      "value": "A prayer wheel and holy water",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "properties": [
      "vocal",
      "somatic",
      "material"
    ],
    "activities": {
      "CG39k7s3MLbLH05T": {
        "type": "heal",
        "activation": {
          "type": "action",
          "value": null,
          "override": false
        },
        "consumption": {
          "targets": [],
          "scaling": {
            "allowed": false,
            "max": ""
          },
          "spellSlot": true
        },
        "description": {
          "chatFlavor": ""
        },
        "duration": {
          "units": "inst",
          "concentration": false,
          "override": false
        },
        "effects": [
          {
            "_id": "gMvUlhgIUWdHEJ6r"
          }
        ],
        "range": {
          "override": false
        },
        "target": {
          "prompt": true,
          "template": {
            "contiguous": false,
            "units": "ft"
          },
          "affects": {
            "choice": false
          },
          "override": false
        },
        "healing": {
          "number": 4,
          "denomination": "8",
          "bonus": "15",
          "types": [
            "healing"
          ],
          "custom": {
            "enabled": false,
            "formula": ""
          },
          "scaling": {
            "mode": "",
            "number": null,
            "formula": ""
          }
        },
        "uses": {
          "spent": 0,
          "recovery": [],
          "max": ""
        },
        "sort": 0,
        "_id": "CG39k7s3MLbLH05T",
        "name": "",
        "img": "",
        "appliedEffects": [
          "gMvUlhgIUWdHEJ6r"
        ]
      }
    },
    "identifier": ""
  },
  "ownership": {
    "default": 0,
    "VJURYym0JQByHBQL": 3,
    "MKYWAnkTJr0gkDqT": 3,
    "vHqSHJMdmEO6Mk2C": 3
  },
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "coreVersion": "12.331",
    "systemId": "dnd5e",
    "systemVersion": "4.0.4",
    "createdTime": 1726952198252,
    "modifiedTime": 1729563427516,
    "lastModifiedBy": "YxlXl9sauSuWxHdZ"
  },
  "_id": "CrRJUlDGltHJnc7c",
  "sort": 600000,
  "_key": "!items!CrRJUlDGltHJnc7c"
}
